#!/usr/bin/env node
/* eslint no-process-env: off, no-process-exit:off */
const cluster = require('cluster');
const config = require('../config');
const IonLogger = require('core/impl/log/IonLogger');
const sysLog = new IonLogger(config.log || {});
const di = require('core/di');
const i18n = require('core/i18n');
const {format} = require('util');

i18n.default(config.lang);
const t = msg => i18n.t(msg)({domain: 'cluster'});
const extend = require('extend');

function killEmAll() {
  for (const id in cluster.workers) {
    cluster.workers[id].kill();
  }
}

if (cluster.isMaster) {
  const os = require('os');

  const clusterConfig = config.cluster || {};

  const cpus = os.cpus().length;
  let numWorkers = process.env.WORKER_COUNT || clusterConfig.count || cpus;
  if (numWorkers > cpus) {
    numWorkers = cpus;
  }
  let stopping = false;

  if (clusterConfig.master && typeof clusterConfig.master === 'object') {
    cluster.setupMaster(clusterConfig.master);
  }

  cluster.on('exit', (worker) => {
    sysLog.warn(format(t('ION application (pid: %s) stopped.'), worker.process.pid));
    if (!stopping) {
      cluster.fork();
    }
  });

  cluster.on('listening', (worker, address) => {
    sysLog.info(format(
      t('ION application (pid: %s) started on address %s:%s'),
      worker.process.pid, address.address || 'localhost', address.port
    ));
  });

  process.on('SIGHUP', () => {
    sysLog.warn(t('ION application cluster restart'));
    killEmAll();
  });

  process.on('SIGTERM', () => {
    stopping = true;
    killEmAll();
  });

  let p = i18n.load(path.normalize(path.join(__dirname, '..', 'i18n'))).then(() => {
    sysLog.info(format(t('Starting ION application cluster (pid: %s)'), process.pid));
  });
  for (let i = 1; i < numWorkers; i++) {
    p = p.then(() => {
      let w = cluster.fork();
      return new Promise((resolve, reject) => {
        w.on('listening', resolve);
        w.on('error', err => reject(err));
      });
    });
  }
  if (config.runJobs) {
    config.bootstrap.rtEvents.options = {
      target: 'ion://process',
      stopEvent: 'SIGTERM'
    };
    p.then(() => di('boot', config.bootstrap, {sysLog: sysLog, process: process}))
      .then(scope =>
        di(
          'app',
          di.extract('scheduler', extend(true, config.di, scope.settings.get('plugins') || {})),
          {},
          'boot'
        )
      )
      .then(
        (scope) => {
          sysLog.info(t('Starting scheduler'));
          return scope.scheduler.start().then(() => {
            sysLog.info(t('Scheduler started'));
          });
        }
      )
      .catch(
        (e) => {
          sysLog.error(e);
          killEmAll();
          process.exit(130);
        }
      );
  }
} else {
  const server = require('lib/server');
  server({config, sysLog});
}
